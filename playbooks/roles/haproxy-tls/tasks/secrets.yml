---
- name: Create kubernetes script directory
  file: path={{ kube_script_dir }} state=directory

- name: Create system kube-cert groups
  group: name={{ kube_cert_group }} state=present system=yes

- name: Create system kube user
  user:
    name=kube
    comment="Kubernetes user"
    shell=/sbin/nologin
    state=present
    system=yes
    groups={{ kube_cert_group }}

- name: make sure the certificate directory exits
  file:
    path={{ ha_cert_dir }}
    state=directory
    mode=o-rwx
    group={{ kube_cert_group }}


- name: Fix Ansible not setting default var in hostvars array
  set_fact:
    kube_cert_ip: "{{ kube_cert_ip }}"

- include: gen_certs.yml
  when: inventory_hostname == groups['ha'][0]

- name: Read back the CA certificate
  slurp:
    src: "{{ ha_cert_dir }}/ca.crt"
  register: ca_cert
  run_once: true
  delegate_to: "{{ groups['ha'][0] }}"

- name: Register the CA certificate as a fact so it can be used later
  set_fact:
    kube_ca_cert: "{{ ca_cert.content|b64decode }}"

- name: Place CA certificate and kube_cfg credentials everywhere
  copy:
    content: "{{ kube_ca_cert }}"
    dest: "{{ ha_cert_dir }}/ca.crt"
    group: "{{ kube_cert_group }}"
    owner: "kube"
    mode: 0440

- name: Read back the server  cert
  slurp:
    src: "{{ ha_cert_dir }}/server.crt"
  register: server_crt
  run_once: true
  delegate_to: "{{ groups['ha'][0] }}"

- name: Register the server cert as a fact so it can be used later
  set_fact:
    kube_server_crt: "{{ server_crt.content|b64decode }}"

- name: Place server cert credentials everywhere
  copy:
    content: "{{ kube_server_crt }}"
    dest: "{{ ha_cert_dir }}/server.crt"
    group: "{{ kube_cert_group }}"
    owner: "kube"
    mode: 0440
  when: inventory_hostname in groups['ha']


- name: Read back the server key
  slurp:
    src: "{{ ha_cert_dir }}/server.key"
  register: server_key
  run_once: true
  delegate_to: "{{ groups['ha'][0] }}"

- name: Register the server key as a fact so it can be used later
  set_fact:
    kube_server_key: "{{ server_key.content|b64decode }}"

- name: Place server cert credentials everywhere
  copy:
    content: "{{ kube_server_key }}"
    dest: "{{ ha_cert_dir }}/server.key"
    group: "{{ kube_cert_group }}"
    owner: "kube"
    mode: 0440
  when: inventory_hostname in groups['ha']

- name: Read back the server pem
  slurp:
    src: "{{ ha_cert_dir }}/server.pem"
  register: server_pem
  run_once: true
  delegate_to: "{{ groups['ha'][0] }}"

- name: Register the server key as a fact so it can be used later
  set_fact:
    kube_server_pem: "{{ server_pem.content|b64decode }}"

- name: Place server cert credentials everywhere
  copy:
    content: "{{ kube_server_pem }}"
    dest: "{{ ha_cert_dir }}/server.pem"
    group: "{{ kube_cert_group }}"
    owner: "kube"
    mode: 0440
  when: inventory_hostname in groups['ha']
