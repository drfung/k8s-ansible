---
- name: Install openssl for easy-rsa stuff
  action: "{{ ansible_pkg_mgr }}"
  args:
    name: "{{ item }}"
    state: latest
  with_items:
    - openssl
    - curl

#- name: Get create ca cert script from Kubernetes
#  get_url:
#    url=https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/saltbase/salt/generate-cert/make-ca-cert.sh
#    dest={{ kube_script_dir }}/make-ca-cert.sh mode=0500
#    force=yes

- name: HACK | overwrite make-ca-cert.sh from local copy
  copy:
    src: make-ca-cert.sh
    dest: "{{ kube_script_dir }}"
    mode: "0500"
  changed_when: false

- name: 
  copy:
    src: easy-rsa.tar.gz
    dest: "{{ kube_script_dir }}"
    mode: "0755"

#- debug:
#    msg: "MASTER_IP {% for host in groups['masters'] %}{{ hostvars[host]['kube_cert_ip'] }}{% if not loop.last %},{% endif %}{% endfor %}"
#
#- debug:
#    msg: "MASTERS: {{ groups['masters']|join(',') }}"
#- debug:
#    msg: "DNS_DOMAIN: {{ dns_domain }}"
#- debug:
#    msg: "SERVICE_CLUSTER_IP_RANGE: {{ kube_service_addresses }}"
#- debug:
#    msg: "CERT_DIR: {{ kube_cert_dir }}"
#- debug:
#    msg: "CERT_GROUP: {{ kube_cert_group }}"
#- debug:
#    msg: "HTTP_PROXY: {{ http_proxy|default('') }}"
#- debug:
#    msg: "HTTPS_PROXY: {{ https_proxy|default('') }}"
#- debug:
#    msg: "CLUSTER_HOSTNAME: {{ master_cluster_hostname|default('') }}"
#- debug:
#    msg: "CLUSTER_PUBLIC_HOSTNAME: {{ master_cluster_public_hostname|default('') }}"
#- debug:
#    msg: "KUBE_CERT_KEEP_CA: {{ kube_cert_keep_ca | default(false) | lower }}"


- name: Run create cert script on ha
  command:
    "sh {{ kube_script_dir }}/make-ca-cert.sh"
  args:
    creates: "{{ ha_cert_dir }}/server.crt"
  environment:
    MASTER_IP: "{% for host in groups['ha'] %}{{ hostvars[host]['kube_cert_ip'] }}{% if not loop.last %},{% else %},{{ kube_vip }}{% endif %}{% endfor %}"
    MASTERS: "{{ groups['ha']|join(',') }}"
    DNS_DOMAIN: "{{ dns_domain }}"
    SERVICE_CLUSTER_IP_RANGE: "{{ kube_service_addresses }}"
    CERT_DIR: "{{ ha_cert_dir }}"
    CERT_GROUP: "{{ kube_cert_group }}"
    HTTP_PROXY: "{{ http_proxy|default('') }}"
    HTTPS_PROXY: "{{ https_proxy|default('') }}"
    CLUSTER_HOSTNAME: "{{ master_cluster_hostname|default('') }}"
    CLUSTER_PUBLIC_HOSTNAME: "{{ master_cluster_public_hostname|default('') }}"
    KUBE_CERT_KEEP_CA: "{{ kube_cert_keep_ca | default(false) | lower }}"

- name: Verify certificate permissions
  file:
    path={{ item }}
    group={{ kube_cert_group }}
    owner=kube
    mode=0440
  with_items:
    - "{{ ha_cert_dir }}/ca.crt"
    - "{{ ha_cert_dir }}/server.crt"
    - "{{ ha_cert_dir }}/server.key"
    - "{{ ha_cert_dir }}/kubecfg.crt"
    - "{{ ha_cert_dir }}/kubecfg.key"
    - "{{ ha_cert_dir }}//server.pem"

- name: Check CA private key permissions if kube_cert_keep_ca is set to "true"
  file:
    path: "{{ ha_cert_dir }}/ca.key"
    group: "{{ kube_cert_group }}"
    owner: kube
    mode: 0440
  when: kube_cert_keep_ca | default(false)
